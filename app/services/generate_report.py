from app.models.report_record import GeneratedReport
import os
from docx import Document
from docx.shared import Pt
from datetime import datetime

import app.database as db
from app.retrieval.generate_answer import generate_answer

session = db.session
reports_generated_folder = "generated_reports"

os.makedirs(reports_generated_folder, exist_ok=True) #if it's not there


def generate_docx_report(title, sections, prompt_context, tenant, file_id):
    doc = Document() #obj of the docx

    #cover Page
    doc.add_heading(title, level=0)
    doc.add_paragraph(f"Tenant: {tenant}")
    doc.add_paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    doc.add_page_break()
    
    #if there isn't any sections to write, it will generate it
    if not sections:
        outline_prompt = f"Generate an outline for a report titled: '{title}' with this context: {prompt_context}"
        outline_text = generate_answer(outline_prompt)
        sections = [s.strip() for s in outline_text.split("\n") if s.strip()]

    #table of Contents placeholder
    doc.add_heading("Table of Contents", level=1)
    for i, section in enumerate(sections):
        doc.add_paragraph(f"{i+1}. {section}")
    doc.add_page_break()

    #section content
    for section in sections:
        doc.add_heading(section, level=1)
        section_prompt = f"{prompt_context}\n\nWrite a section titled '{section}'"
        section_content = generate_answer(section_prompt)
        doc.add_paragraph(section_content)
        doc.add_page_break()

    #metadata 
    doc.add_paragraph(f"Report ID: {file_id}")
    doc.add_paragraph(f"Generated by: Eltrion AI Assistant")

    #save DOCX
    file_path = os.path.join(reports_generated_folder, f"{file_id}.docx")
    doc.save(file_path)

    report = GeneratedReport(id=file_id, title=title, tenant=tenant, file_path=file_path)
    session.add(report)
    session.flush()
    session.commit()

    return file_path


